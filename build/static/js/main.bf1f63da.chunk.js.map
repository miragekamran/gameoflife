{"version":3,"sources":["Game.js","App.js","serviceWorker.js","index.js"],"names":["Cell","this","props","x","y","className","style","left","top","width","CELL_SIZE","height","React","Component","Game","state","cells","isRunning","interval","runGame","setState","runIteration","stopGame","timeoutHandler","window","clearTimeout","handleIntervalChange","event","target","value","handleClear","board","makeEmptyBoard","makeCells","handleRandom","rows","cols","Math","random","handleClick","elemOffset","getElementOffset","offsetX","clientX","offsetY","clientY","floor","HEIGHT","WIDTH","console","log","newBoard","neighbors","calculateNeighbors","setTimeout","dirs","i","length","dir","y1","x1","push","rect","boardRef","getBoundingClientRect","doc","document","documentElement","pageXOffset","clientLeft","pageYOffset","clientTop","backgroundSize","onClick","ref","n","map","cell","key","onChange","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bf1f63da.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Game.css\";\n\nconst CELL_SIZE = 20;\nconst WIDTH = 800;\nconst HEIGHT = 600;\n\nclass Cell extends React.Component {\n    render() {\n        const { x, y } = this.props;\n        return (\n            <div\n                className=\"Cell\"\n                style={{\n                    left: `${CELL_SIZE * x + 1}px`,\n                    top: `${CELL_SIZE * y + 1}px`,\n                    width: `${CELL_SIZE - 1}px`,\n                    height: `${CELL_SIZE - 1}px`\n                }}\n            />\n        );\n    }\n}\n\nclass Game extends React.Component {\n    constructor() {\n        super();\n        this.rows = HEIGHT / CELL_SIZE;\n        this.cols = WIDTH / CELL_SIZE;\n        this.board = this.makeEmptyBoard();\n    }\n\n    state = {\n        cells: [],\n        isRunning: false,\n        interval: 100\n    };\n\n    runGame = () => {\n        this.setState({ isRunning: true });\n        this.runIteration();\n    };\n\n    stopGame = () => {\n        this.setState({ isRunning: false });\n        if (this.timeoutHandler) {\n            window.clearTimeout(this.timeoutHandler);\n            this.timeoutHandler = null;\n        }\n    };\n\n    runIteration() {\n        console.log(\"running iteration\");\n        let newBoard = this.makeEmptyBoard();\n\n        for (let y = 0; y < this.rows; y++) {\n            for (let x = 0; x < this.cols; x++) {\n                let neighbors = this.calculateNeighbors(this.board, x, y);\n                if (this.board[y][x]) {\n                    if (neighbors === 2 || neighbors === 3) {\n                        newBoard[y][x] = true;\n                    } else {\n                        newBoard[y][x] = false;\n                    }\n                } else {\n                    if (!this.board[y][x] && neighbors === 3) {\n                        newBoard[y][x] = true;\n                    }\n                }\n            }\n        }\n\n        // TODO: Add logic for each iteration here.\n        this.board = newBoard;\n        this.setState({ cells: this.makeCells() });\n\n        this.timeoutHandler = window.setTimeout(() => {\n            this.runIteration();\n        }, this.state.interval);\n    }\n\n    /**\n     * Calculate the number of neighbors at point (x, y)\n     * @param {Array} board\n     * @param {int} x\n     * @param {int} y\n     */\n    calculateNeighbors(board, x, y) {\n        let neighbors = 0;\n        const dirs = [\n            [-1, -1],\n            [-1, 0],\n            [-1, 1],\n            [0, 1],\n            [1, 1],\n            [1, 0],\n            [1, -1],\n            [0, -1]\n        ];\n        for (let i = 0; i < dirs.length; i++) {\n            const dir = dirs[i];\n            let y1 = y + dir[0];\n            let x1 = x + dir[1];\n\n            if (\n                x1 >= 0 &&\n                x1 < this.cols &&\n                y1 >= 0 &&\n                y1 < this.rows &&\n                board[y1][x1]\n            ) {\n                neighbors++;\n            }\n        }\n\n        return neighbors;\n    }\n\n    handleIntervalChange = event => {\n        this.state({ interval: event.target.value });\n    };\n\n    handleClear = () => {\n        this.board = this.makeEmptyBoard();\n        this.setState({ cells: this.makeCells() });\n    };\n\n    handleRandom = () => {\n        for (let y = 0; y < this.rows; y++) {\n            for (let x = 0; x < this.cols; x++) {\n                this.board[y][x] = Math.random() >= 0.5;\n            }\n        }\n\n        this.setState({ cells: this.makeCells() });\n    };\n\n    // Create an empty board\n    makeEmptyBoard() {\n        let board = [];\n        for (let y = 0; y < this.rows; y++) {\n            board[y] = [];\n            for (let x = 0; x < this.cols; x++) {\n                board[y][x] = false;\n            }\n        }\n        return board;\n    }\n\n    // Create cells from this.board\n    makeCells() {\n        let cells = [];\n        for (let y = 0; y < this.rows; y++) {\n            for (let x = 0; x < this.cols; x++) {\n                if (this.board[y][x]) {\n                    cells.push({ x, y });\n                }\n            }\n        }\n        return cells;\n    }\n\n    getElementOffset() {\n        const rect = this.boardRef.getBoundingClientRect();\n        const doc = document.documentElement;\n\n        return {\n            x: rect.left + window.pageXOffset - doc.clientLeft,\n            y: rect.top + window.pageYOffset - doc.clientTop\n        };\n    }\n\n    handleClick = event => {\n        const elemOffset = this.getElementOffset();\n        const offsetX = event.clientX - elemOffset.x;\n        const offsetY = event.clientY - elemOffset.y;\n\n        const x = Math.floor(offsetX / CELL_SIZE);\n        const y = Math.floor(offsetY / CELL_SIZE);\n\n        if (x >= 0 && x <= this.cols && y >= 0 && y <= this.rows) {\n            this.board[y][x] = !this.board[y][x];\n        }\n\n        this.setState({ cells: this.makeCells() });\n    };\n\n    render() {\n        const { cells, interval, isRunning } = this.state;\n        return (\n            <div>\n                <div\n                    className=\"Board\"\n                    style={{\n                        width: WIDTH,\n                        height: HEIGHT,\n                        backgroundSize: `${CELL_SIZE}px ${CELL_SIZE}px`\n                    }}\n                    onClick={this.handleClick}\n                    ref={n => {\n                        this.boardRef = n;\n                    }}\n                >\n                    {cells.map(cell => (\n                        <Cell\n                            x={cell.x}\n                            y={cell.y}\n                            key={`${cell.x},${cell.y}`}\n                        />\n                    ))}\n                </div>\n\n                <div className=\"controls\">\n                    Update every\n                    <input\n                        value={this.state.interval}\n                        onChange={this.handleIntervalChange}\n                    />\n                    msec\n                    {isRunning ? (\n                        <button className=\"button\" onClick={this.stopGame}>\n                            Stop\n                        </button>\n                    ) : (\n                        <button className=\"button\" onClick={this.runGame}>\n                            Run\n                        </button>\n                    )}\n                    <button className=\"button\" onClick={this.handleRandom}>\n                        Random\n                    </button>\n                    <button className=\"button\" onClick={this.handleClear}>\n                        Clear\n                    </button>\n                </div>\n                <br />\n                <div className=\"text-box\">\n                    <h3>Rules:</h3>\n                    <p>\n                        The universe of the Game of Life is an infinite,\n                        two-dimensional orthogonal grid of square cells, each of\n                        which is in one of two possible states, live or dead,\n                        (or populated and unpopulated, respectively). Every cell\n                        interacts with its eight neighbours, which are the cells\n                        that are horizontally, vertically, or diagonally\n                        adjacent. At each step in time, the following\n                        transitions occur:\n                        <ol>\n                            <li>\n                                Any live cell with fewer than two live\n                                neighbours dies, as if by underpopulation.\n                            </li>\n                            <li>\n                                Any live cell with two or three live neighbours\n                                lives on to the next generation.\n                            </li>\n                            <li>\n                                Any live cell with more than three live\n                                neighbours dies, as if by overpopulation.\n                            </li>\n                            <li>\n                                Any dead cell with exactly three live neighbours\n                                becomes a live cell, as if by reproduction.\n                            </li>\n                        </ol>\n                        These rules, which compare the behavior of the automaton\n                        to real life, can be condensed into the following:\n                        <ol>\n                            <li>\n                                Any live cell with two or three live neighbours\n                                survives.\n                            </li>\n                            <li>\n                                Any dead cell with three live neighbours becomes\n                                a live cell.\n                            </li>\n                            <li>\n                                All other live cells die in the next generation.\n                                Similarly, all other dead cells stay dead.\n                            </li>\n                        </ol>\n                        The initial pattern constitutes the seed of the system.\n                        The first generation is created by applying the above\n                        rules simultaneously to every cell in the seed; births\n                        and deaths occur simultaneously, and the discrete moment\n                        at which this happens is sometimes called a tick. Each\n                        generation is a pure function of the preceding one. The\n                        rules continue to be applied repeatedly to create\n                        further generations.\n                    </p>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Game;\n","import React from 'react';\n\nimport Game from './Game';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h3>Conway's Game of Life</h3>\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}